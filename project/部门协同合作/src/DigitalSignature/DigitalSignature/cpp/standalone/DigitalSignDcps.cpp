//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: DigitalSignDcps.cpp
//  Source: DigitalSignDcps.idl
//  Generated: Thu Nov  1 16:32:03 2018
//  OpenSplice 6.7.180404OSS
//  
//******************************************************************

#include "DigitalSignDcps.h"

#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUVLSeq < DigitalSignData::Msg, struct MsgSeq_uniq_>;
#endif

const char * DigitalSignData::MsgTypeSupportInterface::_local_id = "IDL:DigitalSignData/MsgTypeSupportInterface:1.0";

DigitalSignData::MsgTypeSupportInterface_ptr DigitalSignData::MsgTypeSupportInterface::_duplicate (DigitalSignData::MsgTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean DigitalSignData::MsgTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, DigitalSignData::MsgTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

DigitalSignData::MsgTypeSupportInterface_ptr DigitalSignData::MsgTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   DigitalSignData::MsgTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (DigitalSignData::MsgTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < DigitalSignData::MsgTypeSupportInterface_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

DigitalSignData::MsgTypeSupportInterface_ptr DigitalSignData::MsgTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   DigitalSignData::MsgTypeSupportInterface_ptr result;
   result = dynamic_cast < DigitalSignData::MsgTypeSupportInterface_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * DigitalSignData::MsgDataWriter::_local_id = "IDL:DigitalSignData/MsgDataWriter:1.0";

DigitalSignData::MsgDataWriter_ptr DigitalSignData::MsgDataWriter::_duplicate (DigitalSignData::MsgDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean DigitalSignData::MsgDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, DigitalSignData::MsgDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

DigitalSignData::MsgDataWriter_ptr DigitalSignData::MsgDataWriter::_narrow (DDS::Object_ptr p)
{
   DigitalSignData::MsgDataWriter_ptr result = NULL;
   if (p && p->_is_a (DigitalSignData::MsgDataWriter::_local_id))
   {
      result = dynamic_cast < DigitalSignData::MsgDataWriter_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

DigitalSignData::MsgDataWriter_ptr DigitalSignData::MsgDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   DigitalSignData::MsgDataWriter_ptr result;
   result = dynamic_cast < DigitalSignData::MsgDataWriter_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * DigitalSignData::MsgDataReader::_local_id = "IDL:DigitalSignData/MsgDataReader:1.0";

DigitalSignData::MsgDataReader_ptr DigitalSignData::MsgDataReader::_duplicate (DigitalSignData::MsgDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean DigitalSignData::MsgDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, DigitalSignData::MsgDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

DigitalSignData::MsgDataReader_ptr DigitalSignData::MsgDataReader::_narrow (DDS::Object_ptr p)
{
   DigitalSignData::MsgDataReader_ptr result = NULL;
   if (p && p->_is_a (DigitalSignData::MsgDataReader::_local_id))
   {
      result = dynamic_cast < DigitalSignData::MsgDataReader_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

DigitalSignData::MsgDataReader_ptr DigitalSignData::MsgDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   DigitalSignData::MsgDataReader_ptr result;
   result = dynamic_cast < DigitalSignData::MsgDataReader_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * DigitalSignData::MsgDataReaderView::_local_id = "IDL:DigitalSignData/MsgDataReaderView:1.0";

DigitalSignData::MsgDataReaderView_ptr DigitalSignData::MsgDataReaderView::_duplicate (DigitalSignData::MsgDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean DigitalSignData::MsgDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, DigitalSignData::MsgDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

DigitalSignData::MsgDataReaderView_ptr DigitalSignData::MsgDataReaderView::_narrow (DDS::Object_ptr p)
{
   DigitalSignData::MsgDataReaderView_ptr result = NULL;
   if (p && p->_is_a (DigitalSignData::MsgDataReaderView::_local_id))
   {
      result = dynamic_cast < DigitalSignData::MsgDataReaderView_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

DigitalSignData::MsgDataReaderView_ptr DigitalSignData::MsgDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   DigitalSignData::MsgDataReaderView_ptr result;
   result = dynamic_cast < DigitalSignData::MsgDataReaderView_ptr> (p);
   if (result) result->m_count++;
   return result;
}



