//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: DigitalSign.cpp
//  Source: DigitalSign.idl
//  Generated: Thu Nov  1 16:32:03 2018
//  OpenSplice 6.7.180404OSS
//  
//******************************************************************

#include "DigitalSign.h"


#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPS_FArray_var< DigitalSignData::Signature::_value, DigitalSignData::Signature::_value_slice, struct DigitalSignData::Signature::_value_uniq_>;
template class DDS_DCPS_Array_forany< DigitalSignData::Signature::_value, DigitalSignData::Signature::_value_slice, struct DigitalSignData::Signature::_value_uniq_>;
#endif

template <>
DigitalSignData::Signature::_value_slice* DDS_DCPS_ArrayHelper < DigitalSignData::Signature::_value, DigitalSignData::Signature::_value_slice, DigitalSignData::Signature::_value_uniq_>::alloc ()
{
   return DigitalSignData::Signature::_value_alloc ();
}

template <>
void DDS_DCPS_ArrayHelper < DigitalSignData::Signature::_value, DigitalSignData::Signature::_value_slice, DigitalSignData::Signature::_value_uniq_>::copy (DigitalSignData::Signature::_value_slice *to, const DigitalSignData::Signature::_value_slice* from)
{
   DigitalSignData::Signature::_value_copy (to, from);
}

template <>
void DDS_DCPS_ArrayHelper < DigitalSignData::Signature::_value, DigitalSignData::Signature::_value_slice, DigitalSignData::Signature::_value_uniq_>::free (DigitalSignData::Signature::_value_slice *ptr)
{
   DigitalSignData::Signature::_value_free (ptr);
}

DigitalSignData::Signature::_value_slice * DigitalSignData::Signature::_value_alloc ()
{
   DDS::ULongLong * ret = (DDS::ULongLong*) new DDS::ULongLong [4];
   return (_value_slice *) ret;
}

void DigitalSignData::Signature::_value_free (_value_slice * s)
{
   delete [] s;
}

void DigitalSignData::Signature::_value_copy
(
   _value_slice * to,
   const _value_slice * from
)
{
   const DDS::ULongLong* sv = ( const DDS::ULongLong*) from;
   DDS::ULongLong* tv = (DDS::ULongLong*) to;
   for (DDS::ULong i = 0; i < 4; i++) tv[i] = sv[i];
}

DigitalSignData::Signature::_value_slice * DigitalSignData::Signature::_value_dup
   (const _value_slice * from)
{
   _value_slice * to = _value_alloc ();
   _value_copy (to, from);
   return to;
}




