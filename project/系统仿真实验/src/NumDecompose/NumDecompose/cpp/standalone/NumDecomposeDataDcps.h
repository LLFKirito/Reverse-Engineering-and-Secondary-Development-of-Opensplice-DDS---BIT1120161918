//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: NumDecomposeDataDcps.h
//  Source: NumDecomposeDataDcps.idl
//  Generated: Wed Nov  7 16:38:27 2018
//  OpenSplice 6.7.180404OSS
//  
//******************************************************************
#ifndef _NUMDECOMPOSEDATADCPS_H_
#define _NUMDECOMPOSEDATADCPS_H_

#include "sacpp_mapping.h"
#include "dds_dcps.h"
#include "NumDecomposeData.h"


namespace NumDecomposeData
{

   class NumSentTypeSupportInterface;

   typedef NumSentTypeSupportInterface * NumSentTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < NumSentTypeSupportInterface> NumSentTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < NumSentTypeSupportInterface> NumSentTypeSupportInterface_out;


   class NumSentDataWriter;

   typedef NumSentDataWriter * NumSentDataWriter_ptr;
   typedef DDS_DCPSInterface_var < NumSentDataWriter> NumSentDataWriter_var;
   typedef DDS_DCPSInterface_out < NumSentDataWriter> NumSentDataWriter_out;


   class NumSentDataReader;

   typedef NumSentDataReader * NumSentDataReader_ptr;
   typedef DDS_DCPSInterface_var < NumSentDataReader> NumSentDataReader_var;
   typedef DDS_DCPSInterface_out < NumSentDataReader> NumSentDataReader_out;


   class NumSentDataReaderView;

   typedef NumSentDataReaderView * NumSentDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < NumSentDataReaderView> NumSentDataReaderView_var;
   typedef DDS_DCPSInterface_out < NumSentDataReaderView> NumSentDataReaderView_out;

   struct NumSentSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < NumSent, struct NumSentSeq_uniq_> NumSentSeq;
   typedef DDS_DCPSSequence_var < NumSentSeq> NumSentSeq_var;
   typedef DDS_DCPSSequence_out < NumSentSeq> NumSentSeq_out;
   class NumSentTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef NumSentTypeSupportInterface_ptr _ptr_type;
      typedef NumSentTypeSupportInterface_var _var_type;

      static NumSentTypeSupportInterface_ptr _duplicate (NumSentTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static NumSentTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static NumSentTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static NumSentTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      NumSentTypeSupportInterface_ptr _this () { return this; }


   protected:
      NumSentTypeSupportInterface () {};
      ~NumSentTypeSupportInterface () {};
   private:
      NumSentTypeSupportInterface (const NumSentTypeSupportInterface &);
      NumSentTypeSupportInterface & operator = (const NumSentTypeSupportInterface &);
   };

   class NumSentDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef NumSentDataWriter_ptr _ptr_type;
      typedef NumSentDataWriter_var _var_type;

      static NumSentDataWriter_ptr _duplicate (NumSentDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static NumSentDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static NumSentDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static NumSentDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      NumSentDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const NumSent& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const NumSent& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const NumSent& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const NumSent& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const NumSent& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const NumSent& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const NumSent& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const NumSent& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const NumSent& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const NumSent& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (NumSent& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const NumSent& instance_data) = 0;

   protected:
      NumSentDataWriter () {};
      ~NumSentDataWriter () {};
   private:
      NumSentDataWriter (const NumSentDataWriter &);
      NumSentDataWriter & operator = (const NumSentDataWriter &);
   };

   class NumSentDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef NumSentDataReader_ptr _ptr_type;
      typedef NumSentDataReader_var _var_type;

      static NumSentDataReader_ptr _duplicate (NumSentDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static NumSentDataReader_ptr _narrow (DDS::Object_ptr obj);
      static NumSentDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static NumSentDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      NumSentDataReader_ptr _this () { return this; }

      virtual DDS::Long read (NumSentSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (NumSentSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (NumSentSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (NumSentSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (NumSent& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (NumSent& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (NumSentSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (NumSentSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (NumSentSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (NumSentSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (NumSentSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (NumSentSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (NumSentSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (NumSent& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const NumSent& instance) = 0;

   protected:
      NumSentDataReader () {};
      ~NumSentDataReader () {};
   private:
      NumSentDataReader (const NumSentDataReader &);
      NumSentDataReader & operator = (const NumSentDataReader &);
   };

   class NumSentDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef NumSentDataReaderView_ptr _ptr_type;
      typedef NumSentDataReaderView_var _var_type;

      static NumSentDataReaderView_ptr _duplicate (NumSentDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static NumSentDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static NumSentDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static NumSentDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      NumSentDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (NumSentSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (NumSentSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (NumSentSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (NumSentSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (NumSent& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (NumSent& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (NumSentSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (NumSentSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (NumSentSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (NumSentSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (NumSentSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (NumSentSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (NumSentSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (NumSent& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const NumSent& instance) = 0;

   protected:
      NumSentDataReaderView () {};
      ~NumSentDataReaderView () {};
   private:
      NumSentDataReaderView (const NumSentDataReaderView &);
      NumSentDataReaderView & operator = (const NumSentDataReaderView &);
   };

}




#endif
