//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: NumDecomposeDataDcps.cpp
//  Source: NumDecomposeDataDcps.idl
//  Generated: Wed Nov  7 16:38:27 2018
//  OpenSplice 6.7.180404OSS
//  
//******************************************************************

#include "NumDecomposeDataDcps.h"

#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUVLSeq < NumDecomposeData::NumSent, struct NumSentSeq_uniq_>;
#endif

const char * NumDecomposeData::NumSentTypeSupportInterface::_local_id = "IDL:NumDecomposeData/NumSentTypeSupportInterface:1.0";

NumDecomposeData::NumSentTypeSupportInterface_ptr NumDecomposeData::NumSentTypeSupportInterface::_duplicate (NumDecomposeData::NumSentTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean NumDecomposeData::NumSentTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, NumDecomposeData::NumSentTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

NumDecomposeData::NumSentTypeSupportInterface_ptr NumDecomposeData::NumSentTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   NumDecomposeData::NumSentTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (NumDecomposeData::NumSentTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < NumDecomposeData::NumSentTypeSupportInterface_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

NumDecomposeData::NumSentTypeSupportInterface_ptr NumDecomposeData::NumSentTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   NumDecomposeData::NumSentTypeSupportInterface_ptr result;
   result = dynamic_cast < NumDecomposeData::NumSentTypeSupportInterface_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * NumDecomposeData::NumSentDataWriter::_local_id = "IDL:NumDecomposeData/NumSentDataWriter:1.0";

NumDecomposeData::NumSentDataWriter_ptr NumDecomposeData::NumSentDataWriter::_duplicate (NumDecomposeData::NumSentDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean NumDecomposeData::NumSentDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, NumDecomposeData::NumSentDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

NumDecomposeData::NumSentDataWriter_ptr NumDecomposeData::NumSentDataWriter::_narrow (DDS::Object_ptr p)
{
   NumDecomposeData::NumSentDataWriter_ptr result = NULL;
   if (p && p->_is_a (NumDecomposeData::NumSentDataWriter::_local_id))
   {
      result = dynamic_cast < NumDecomposeData::NumSentDataWriter_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

NumDecomposeData::NumSentDataWriter_ptr NumDecomposeData::NumSentDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   NumDecomposeData::NumSentDataWriter_ptr result;
   result = dynamic_cast < NumDecomposeData::NumSentDataWriter_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * NumDecomposeData::NumSentDataReader::_local_id = "IDL:NumDecomposeData/NumSentDataReader:1.0";

NumDecomposeData::NumSentDataReader_ptr NumDecomposeData::NumSentDataReader::_duplicate (NumDecomposeData::NumSentDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean NumDecomposeData::NumSentDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, NumDecomposeData::NumSentDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

NumDecomposeData::NumSentDataReader_ptr NumDecomposeData::NumSentDataReader::_narrow (DDS::Object_ptr p)
{
   NumDecomposeData::NumSentDataReader_ptr result = NULL;
   if (p && p->_is_a (NumDecomposeData::NumSentDataReader::_local_id))
   {
      result = dynamic_cast < NumDecomposeData::NumSentDataReader_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

NumDecomposeData::NumSentDataReader_ptr NumDecomposeData::NumSentDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   NumDecomposeData::NumSentDataReader_ptr result;
   result = dynamic_cast < NumDecomposeData::NumSentDataReader_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * NumDecomposeData::NumSentDataReaderView::_local_id = "IDL:NumDecomposeData/NumSentDataReaderView:1.0";

NumDecomposeData::NumSentDataReaderView_ptr NumDecomposeData::NumSentDataReaderView::_duplicate (NumDecomposeData::NumSentDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean NumDecomposeData::NumSentDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, NumDecomposeData::NumSentDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

NumDecomposeData::NumSentDataReaderView_ptr NumDecomposeData::NumSentDataReaderView::_narrow (DDS::Object_ptr p)
{
   NumDecomposeData::NumSentDataReaderView_ptr result = NULL;
   if (p && p->_is_a (NumDecomposeData::NumSentDataReaderView::_local_id))
   {
      result = dynamic_cast < NumDecomposeData::NumSentDataReaderView_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

NumDecomposeData::NumSentDataReaderView_ptr NumDecomposeData::NumSentDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   NumDecomposeData::NumSentDataReaderView_ptr result;
   result = dynamic_cast < NumDecomposeData::NumSentDataReaderView_ptr> (p);
   if (result) result->m_count++;
   return result;
}



